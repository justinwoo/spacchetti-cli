sudo: required

language: generic
dist: bionic

cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work

services:
  - docker

matrix:
  include:
  # Build on Linux with docker
  - env: BUILD=stack ARGS="" PURS_OS="linux64" IMAGE_TAG=lts-12
    compiler: ": #stack default"

  # Build on macOS natively
  - env: BUILD=stack ARGS="" PURS_OS="macos"
    compiler: ": #stack default osx"
    os: osx

# Build only master and release tags
branches:
  only:
  - master
  - /^\d+\.\d+\.\d+(\.\d+)?$/


before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC
  # We want to always allow newer versions of packages when building on GHC HEAD
  - CABALARGS=""
  - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

  - |
    echo "Running before_install"
    if [ `uname` = "Darwin" ]
    then
      # Download and unpack the stack executable
      export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
      mkdir -p ~/.local/bin

      travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin

      # Use the more reliable S3 mirror of Hackage
      mkdir -p $HOME/.cabal
      echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
      echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

    else
      docker pull "nilrecurring/haskell-lavello:${IMAGE_TAG}"
      docker run --mount src="$(pwd)",target=/home/ubuntu/spago,type=bind "nilrecurring/haskell-lavello:${IMAGE_TAG}" /bin/bash -c "sudo chown -R ubuntu spago; cd spago; stack build --haddock --no-haddock-deps"

    fi


install:
  - |
    echo "Running install"
    if [ `uname` = "Darwin" ]
    then

      echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
      if [ -f configure.ac ]; then autoreconf -i; fi

      set -ex
      stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
      set +ex

    else

      echo "Skipping install on Linux"

    fi


script:
  - |
    echo "Running tests"
    export PATH="${PATH}:$(pwd)/artifacts"
    if [ `uname` = "Darwin" ]
    then
      stack build --test --no-run-tests --copy-bins --local-bin-path ./artifacts --haddock --no-haddock-deps;
    else
      docker run --mount src="$(pwd)",target=/home/ubuntu/spago,type=bind \
       "nilrecurring/haskell-lavello:${IMAGE_TAG}" /bin/bash -c \
       'cd spago && stack build --test --no-run-tests --flag spago:static --haddock --no-haddock-deps'
      docker run --mount src="$(pwd)",target=/home/ubuntu/spago,type=bind \
       "nilrecurring/haskell-lavello:${IMAGE_TAG}" /bin/bash -c \
       'cd spago && stack build --test --no-run-tests --copy-bins --local-bin-path ./artifacts --haddock --no-haddock-deps'
    fi
    nvm install 10 && nvm use 10
    npm install -g psc-package@3.0.1 bower@1.8.8

    # get purescript from github releases
    TAG="v0.13.6"
    wget -O $HOME/purescript.tar.gz https://github.com/purescript/purescript/releases/download/$TAG/$PURS_OS.tar.gz
    tar -xvf $HOME/purescript.tar.gz -C $HOME/
    chmod a+x $HOME/purescript
    PATH=$HOME/purescript:$PATH

    # run the test suite executable
    ./.stack-work/dist/*/*/build/spec/spec


before_deploy:
  - |
    echo "Running before_deploy"

    # We have to check on this condition so we run the before_deploy job only once
    if ! [ "$BEFORE_DEPLOY_RUN" ]; then
      export BEFORE_DEPLOY_RUN=1;

      mkdir uploads
      if [ `uname` = "Darwin" ]
      then
        stack build --copy-bins --local-bin-path ./artifacts;
        sed -e "s/NPM_VERSION/$(./scripts/get-version)/g" -i "" npm/package.json ;
        sed -e "s/PACKAGE_VERSION/$(./scripts/get-version)/g" -i "" npm/install.js ;
      else
        # We first build the static version
        docker run --mount src="$(pwd)",target=/home/ubuntu/spago,type=bind "nilrecurring/haskell-lavello:${IMAGE_TAG}" /bin/bash -c "cd spago; stack build --copy-bins --flag spago:static --local-bin-path ./artifacts"
        cp artifacts/spago spago
        tar -zcvf "${TRAVIS_OS_NAME}-static.tar.gz" spago
        # Then the dynamic one
        docker run --mount src="$(pwd)",target=/home/ubuntu/spago,type=bind "nilrecurring/haskell-lavello:${IMAGE_TAG}" /bin/bash -c "cd spago; stack build --copy-bins --local-bin-path ./artifacts"
        sed -e "s/NPM_VERSION/$(./scripts/get-version)/g" -i npm/package.json ;
        sed -e "s/PACKAGE_VERSION/$(./scripts/get-version)/g" -i npm/install.js ;
      fi
      cp artifacts/spago spago
      tar -zcvf "${TRAVIS_OS_NAME}.tar.gz" spago
      for f in *.tar.gz; do mv "$f" uploads/; done

      ## Get ready to publish npm
      cd npm
      cp ../README.md ./README.md
      cp ../CONTRIBUTING.md ./CONTRIBUTING.md
      cp ../LICENSE ./LICENSE
    fi

deploy:
  - provider: releases
    api_key: $API_KEY
    target_commitish: master
    file_glob: true
    file: ../uploads/*
    skip_cleanup: true
    on:
      tags: true
    script:
      - echo 'done'
  - provider: npm
    email: "$NPM_EMAIL"
    api_key: "$NPM_TOKEN"
    skip_cleanup: true
    on:
      condition: $TRAVIS_OS_NAME = osx
      tags: true
    script:
      - echo 'done'
